library(glmnet)
?glmnet
install.packages("yulab.utils")
install.packages("rcrossref")
library(rcrossref)
library("PubMedWordcloud")
library(scihub_dl)
library(rcrossref)
pmids=getPMIDs("Fullana MA", dFrom = 1980, dTo = 2022)
# abstracts=getAbstracts(pmids)
# clean_abstracts=cleanAbstracts(abstracts)
# plotWordCloud(clean_abstracts)
articles = NULL
for(pmid in pmids)
articles=rbind(data.frame(pmid=pmid, doi=id_converter(pmid,"pmid")))
for(pmid in pmids) {
articles=rbind(data.frame(pmid=pmid, doi=id_converter(pmid,"pmid")))
}
articles
doi=id_converter(pmid,"pmid")
doi
author="Solanes Aleix"
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
n = 1000
q_n <- paste0("&retmax=", n)
library(RCurl)
hlpURL <- getURL(paste0(url_search, q_author, q_n)
doc <- xmlTreeParse(hlpURL, asText = TRUE)
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
n = 1000
q_n <- paste0("&retmax=", n)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
hlpURL
doc <- xmlTreeParse(hlpURL, asText = TRUE)
library(rcrossref)
library(RCurl)
library(XML)
getPMIDs -> function(author) {
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
n = 1000
q_n <- paste0("&retmax=", n)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
doc <- xmlTreeParse(hlpURL, asText = TRUE)
IdlistHlp = xmlValue(doc[["doc"]][["eSearchResult"]][["IdList"]])
if (length(IdlistHlp) > 0) {
Idlist <- substring(IdlistHlp, seq(1, nchar(IdlistHlp) -
1, 8), seq(8, nchar(IdlistHlp), 8))
}
return(Idlist)
}
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
n = 1000
q_n <- paste0("&retmax=", n)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
doc <- xmlTreeParse(hlpURL, asText = TRUE)
doc
doc$doc$children$eSearchResult$IdList
doc$doc$children$eSearchResult$
doc$doc$children$eSearchResult
doc$doc$children$eSearchResult
doc$doc$children$eSearchResult$IdList
xmlValue(doc[["doc"]][["eSearchResult"]][["IdList"]])
install.packages("xml2")
install.packages("xml2")
library(xml2)
as_list(read_xml("<foo> a <b /><c><![CDATA[<d></d>]]></c></foo>"))
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
q_n <- paste0("&retmax=", n)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
doc <- xmlTreeParse(hlpURL, asText = TRUE)
library(RCurl)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
hlpURL
as_list(read_xml(hlpURL))
library(XML)
xmlToList(hlpURL)
xmlToDataFrame(hlpURL)
doc <- xmlTreeParse(hlpURL, asText = TRUE)
xmlToList(doc$doc$children$eSearchResult$IdList)
doc$doc$children$eSearchResult$IdList
doc$doc$children$eSearchResult
xmlToList(doc$doc$children$eSearchResult)
a<-xmlToList(doc$doc$children$eSearchResult)
a$IdList
unlist(a$IdList)
library(rcrossref)
rm(list=ls())
plot(cars)
print(hello)
print("hello")
rm(list = ls())
# Adapted from R packages CalibratR
getECE = function (actual, predicted, n_bins = 10) {
predicted <- predicted
labels <- actual
idx <- order(predicted)
pred_actual <- (cbind(predicted[idx], labels[idx]))
N <- nrow(pred_actual)
rest <- N%%n_bins
S <- 0
W <- c()
B <- min(N, n_bins)
for (i in 1:B) {
if (i <= rest) {
group_pred <- (pred_actual[(((i - 1) * ceiling(N/n_bins) +
1):(i * ceiling(N/n_bins))), 1])
group_actual <- (pred_actual[(((i - 1) * ceiling(N/n_bins) +
1):(i * ceiling(N/n_bins))), 2])
}
else {
group_pred <- (pred_actual[((rest + (i - 1) * floor(N/n_bins) +
1):(rest + i * floor(N/n_bins))), 1])
group_actual <- (pred_actual[((rest + (i - 1) * floor(N/n_bins) +
1):(rest + i * floor(N/n_bins))), 2])
}
n_ <- length(group_pred)
expected <- mean(group_pred)
observed <- mean(group_actual)
S[i] <- abs(observed - expected)
W[i] <- n_/N
}
b = coef(summary(lm(S ~ 1, weights = W)))
b[1] + b[2] * qt(c(0.025, 0.5, 0.975), 9)
}
library(coxme)
library(multisite.accuracy)
library(pROC)
library(rfUtilities)
library(survival)
DIR_RESULTS = "../MRIPredict_feps/results_FINALS/MRIPredict_feps_mania_final_results/RESULTATS_FEPS_MANIA/MANIA/"
X_all = read.csv(paste0(DIR_RESULTS, "mri_and_data/per_subject_linearpredictors/mania_totes_timefromremission_relapsemania_results_cv.csv"))
setwd("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict")
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/CREAR_PAQUET.r")

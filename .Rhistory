library(glmnet)
?glmnet
install.packages("yulab.utils")
install.packages("rcrossref")
library(rcrossref)
library("PubMedWordcloud")
library(scihub_dl)
library(rcrossref)
pmids=getPMIDs("Fullana MA", dFrom = 1980, dTo = 2022)
# abstracts=getAbstracts(pmids)
# clean_abstracts=cleanAbstracts(abstracts)
# plotWordCloud(clean_abstracts)
articles = NULL
for(pmid in pmids)
articles=rbind(data.frame(pmid=pmid, doi=id_converter(pmid,"pmid")))
for(pmid in pmids) {
articles=rbind(data.frame(pmid=pmid, doi=id_converter(pmid,"pmid")))
}
articles
doi=id_converter(pmid,"pmid")
doi
author="Solanes Aleix"
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
n = 1000
q_n <- paste0("&retmax=", n)
library(RCurl)
hlpURL <- getURL(paste0(url_search, q_author, q_n)
doc <- xmlTreeParse(hlpURL, asText = TRUE)
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
n = 1000
q_n <- paste0("&retmax=", n)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
hlpURL
doc <- xmlTreeParse(hlpURL, asText = TRUE)
library(rcrossref)
library(RCurl)
library(XML)
getPMIDs -> function(author) {
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
n = 1000
q_n <- paste0("&retmax=", n)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
doc <- xmlTreeParse(hlpURL, asText = TRUE)
IdlistHlp = xmlValue(doc[["doc"]][["eSearchResult"]][["IdList"]])
if (length(IdlistHlp) > 0) {
Idlist <- substring(IdlistHlp, seq(1, nchar(IdlistHlp) -
1, 8), seq(8, nchar(IdlistHlp), 8))
}
return(Idlist)
}
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
n = 1000
q_n <- paste0("&retmax=", n)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
doc <- xmlTreeParse(hlpURL, asText = TRUE)
doc
doc$doc$children$eSearchResult$IdList
doc$doc$children$eSearchResult$
doc$doc$children$eSearchResult
doc$doc$children$eSearchResult
doc$doc$children$eSearchResult$IdList
xmlValue(doc[["doc"]][["eSearchResult"]][["IdList"]])
install.packages("xml2")
install.packages("xml2")
library(xml2)
as_list(read_xml("<foo> a <b /><c><![CDATA[<d></d>]]></c></foo>"))
url_search <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term="
q_author <- paste0(gsub(pattern = " ", replacement = "+", author), "[author]")
q_n <- paste0("&retmax=", n)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
doc <- xmlTreeParse(hlpURL, asText = TRUE)
library(RCurl)
hlpURL <- getURL(paste0(url_search, q_author, q_n))
hlpURL
as_list(read_xml(hlpURL))
library(XML)
xmlToList(hlpURL)
xmlToDataFrame(hlpURL)
doc <- xmlTreeParse(hlpURL, asText = TRUE)
xmlToList(doc$doc$children$eSearchResult$IdList)
doc$doc$children$eSearchResult$IdList
doc$doc$children$eSearchResult
xmlToList(doc$doc$children$eSearchResult)
a<-xmlToList(doc$doc$children$eSearchResult)
a$IdList
unlist(a$IdList)
library(rcrossref)
rm(list=ls())
plot(cars)
print(hello)
print("hello")
rm(list = ls())
# Adapted from R packages CalibratR
getECE = function (actual, predicted, n_bins = 10) {
predicted <- predicted
labels <- actual
idx <- order(predicted)
pred_actual <- (cbind(predicted[idx], labels[idx]))
N <- nrow(pred_actual)
rest <- N%%n_bins
S <- 0
W <- c()
B <- min(N, n_bins)
for (i in 1:B) {
if (i <= rest) {
group_pred <- (pred_actual[(((i - 1) * ceiling(N/n_bins) +
1):(i * ceiling(N/n_bins))), 1])
group_actual <- (pred_actual[(((i - 1) * ceiling(N/n_bins) +
1):(i * ceiling(N/n_bins))), 2])
}
else {
group_pred <- (pred_actual[((rest + (i - 1) * floor(N/n_bins) +
1):(rest + i * floor(N/n_bins))), 1])
group_actual <- (pred_actual[((rest + (i - 1) * floor(N/n_bins) +
1):(rest + i * floor(N/n_bins))), 2])
}
n_ <- length(group_pred)
expected <- mean(group_pred)
observed <- mean(group_actual)
S[i] <- abs(observed - expected)
W[i] <- n_/N
}
b = coef(summary(lm(S ~ 1, weights = W)))
b[1] + b[2] * qt(c(0.025, 0.5, 0.975), 9)
}
library(coxme)
library(multisite.accuracy)
library(pROC)
library(rfUtilities)
library(survival)
DIR_RESULTS = "../MRIPredict_feps/results_FINALS/MRIPredict_feps_mania_final_results/RESULTATS_FEPS_MANIA/MANIA/"
X_all = read.csv(paste0(DIR_RESULTS, "mri_and_data/per_subject_linearpredictors/mania_totes_timefromremission_relapsemania_results_cv.csv"))
setwd("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict")
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/CREAR_PAQUET.r")
library(mripredict)
library(mripredict)
library(mripredict)
mripredict::launchApp()
library(mripredict)
mripredict::launchApp()
# Create a data frame containing patient and control data
df <- data.frame(patients = c(1, 4, 8, 10, 12, 14),
controls = c(2, 5, 7, 9, 11, 13))
# Plot the data frame
barplot(df,
main = "Patients vs Controls",
xlab = "Group",
ylab = "Score",
col = c("red","blue"),
names.arg = c("Patients", "Controls"))
# Create a data frame containing patient and control data
df <- data.frame(patients = c(1, 4, 8, 10, 12, 14),
controls = c(2, 5, 7, 9, 11, 13))
df
# Plot the data frame
barplot(df,
main = "Patients vs Controls",
xlab = "Group",
ylab = "Score",
col = c("red","blue"),
names.arg = c("Patients", "Controls"))
df
# Create a data frame containing patient and control data
df <- data.frame(patients = c(1, 4, 8, 10, 12, 14),
controls = c(2, 5, 7, 9, 11, 13))
df
# Plot the data frame
barplot(height = df,
main = "Patients vs Controls",
xlab = "Group",
ylab = "Score",
col = c("red","blue"),
names.arg = c("Patients", "Controls"))
# Create a data frame containing patient and control data
df <- data.frame(patients = c(1, 4, 8, 10, 12, 14),
controls = c(2, 5, 7, 9, 11, 13))
df
# Plot the data frame
barplot(height = c(1, 4, 8, 10, 12, 14),
main = "Patients vs Controls",
xlab = "Group",
ylab = "Score",
col = c("red","blue"),
names.arg = c("Patients", "Controls"))
library(ggplot2)
# Create a data frame containing patient and control data
df <- data.frame(patients = c(1, 4, 8, 10, 12, 14),
controls = c(2, 5, 7, 9, 11, 13))
# Plot the data frame
ggplot(data = df, aes(x = 1:nrow(df))) +
geom_col(aes(y = patients, fill = "red"), width = 0.5) +
geom_col(aes(y = controls, fill = "blue"), width = 0.5) +
labs(title = "Patients vs Controls",
x = "Group",
y = "Score",
fill = "") +
scale_fill_manual(values = c("Patients" = "red", "Controls" = "blue"))
library(ggplot2)
# Create a data frame containing patient and control data
df <- data.frame(patients = c(1, 4, 8, 10, 12, 14),
controls = c(2, 5, 7, 9, 11, 13))
# Plot the data frame
ggplot(data = df, aes(x = 1:nrow(df))) +
geom_col(aes(y = patients, fill = "red"), width = 0.5) +
geom_col(aes(y = controls, fill = "blue"), width = 0.5) +
labs(title = "Patients vs Controls",
x = "Group",
y = "Score",
fill = "") +
scale_fill_manual(values = c("Patients" = "red", "Controls" = "blue"))
library(mripredict)
mripredict::mri
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/CREAR_PAQUET.r")
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/CREAR_PAQUET.r")
dump('app.r', file = "inst/shinyapp/app.r")
?dump
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/CREAR_PAQUET.r")
library(mripredict)
mp <- mripredict(mri_data=mri_data, clinical_data = clinical,
response_var="female", covariates=c("cent_age"), predictor=c("score0", "score1", "score2", "clinical_scale1"),
response_family="binomial", modulation="clinical")
mri_data = mri
mp <- mripredict(mri_data=mri_data, clinical_data = clinical,
response_var="female", covariates=c("cent_age"), predictor=c("score0", "score1", "score2", "clinical_scale1"),
response_family="binomial", modulation="clinical")
# perform a 10-fold cross-validation
mp <- mripredict_cv(mp, space = "NO_CHECK",
save_name = "testing",
folds_file = NULL,
n_cores = 1,
n_folds = 10)
clinical
mri
mp <- mripredict(mri_data=mri_data, clinical_data = clinical,
response_var="female", covariates=c("cent_age"), predictor=c("score0", "score1", "score2", "clinical_scale1"),
response_family="binomial", modulation="un")
# perform a 10-fold cross-validation
mp <- mripredict_cv(mp, space = "NO_CHECK",
save_name = "testing",
folds_file = NULL,
n_cores = 1,
n_folds = 10)
launchApp()
library(mripredict)
library(mripredict)
library(mripredict)
?mripredict
library(mripredict)
tools::showNonASCII
tools::showNonASCII()
?tools::showNonASCII
?tools::showNonASCII('source')
setwd("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R")
?tools::showNonASCII('C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R')
tools::showNonASCII('C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R')
tools::showNonASCII('C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R')
tools::showNonASCII('C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R')
clinical
clinical_train
mri
mri_test
library(usethis)
use_data_package_doc(clinical, rd = TRUE)
devtools::document()
rm(list = c("mripredict", "mripredict_cv", "mripredict_fit", "mripredict_predict"))
devtools::document()
install.packages("goodpractice")
library(goodpractice)
goodpractice::all_checks("source.R")
goodpractice::all_checks()
goodpractice('source.R')
goodpractice::all_checks()
goodpractice::goodpractice("source.R", checks = "rcmdcheck_encoding")
goodpractice::goodpractice("source.R", checks = "rcmdcheck_encodings")
goodpractice::goodpractice("source.R", checks = "rcmdcheck_non_ascii_characters_in_data")
install.packages("lintr")
install.packages("lintr")
install.packages("lintr")
lintr::lint("source.R")
lintr::lint("source.R", warnings_only=TRUE)
?lint
linters
tools::showNonASCII("source.R")
a=tools::showNonASCII("source.R")
a
a=tools::showNonASCIIfile("source.R")
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/data.R")
devtools::document("data.R")
devtools::document()
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/data.R")
roxygen2::roxygenise("data.R")
devtools::document()
devtools::document()
setwd("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict")
devtools::document()
devtools::document()
library(mripredict)
cite(mripredict)
cite()
?mripredict
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
library(mripredict)
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
library(mripredict)
?mripredict
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
mp <- mripredict_cv(mp, space = "NO_CHECK",
save_name = "testing",
folds_file = NULL,
n_cores = 1,
n_folds = 10)
mp <- mripredict_fit(mp, space = "MNI", save_name = "model_fit")
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
mp <- mripredict_fit(mp, space = "MNI", save_name = "model_fit")
mp$mri_paths
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
mp <- mripredict_fit(mp, space = "MNI", save_name = "model_fit")
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
mp$mri_paths
mp$mri_un
mp$mri_paths
library(mripredict)
?mripredict
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
mp <- mripredict_cv(mp, space = "NO_CHECK",
save_name = "testing",
folds_file = NULL,
n_cores = 1,
n_folds = 3)
mp <- mripredict_fit(mp, space = "MNI", save_name = "model_fit")
predictions <- mripredict_predict(mp, mri_data = mri_test, clinical_data = clinical_test)
clinical_test
unique(clinical_train$site)
mp$combat$gm_mod
mri_test
clinical_test
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R")
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
mp <- mripredict_fit(mp, space = "MNI", save_name = "model_fit")
predictions <- mripredict_predict(mp, mri_data = mri_test, clinical_data = clinical_test)
source("R/source.R")
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
mp <- mripredict_fit(mp, space = "MNI", save_name = "model_fit")
predictions <- mripredict_predict(mp, mri_data = mri_test, clinical_data = clinical_test)
batch
!is.factor(batch) || nlevels(batch) != length(tmp$levels_batch) ||
any(levels(batch) != tmp$levels_batch)
is.factor(batch)
nlevels(batch)
length(tmp$levels_batch)
any(levels(batch) != tmp$levels_batch)
nlevels(batch) != length(tmp$levels_batch)
!is.factor(batch) || nlevels(batch) != length(tmp$levels_batch) ||
any(levels(batch) != tmp$levels_batch)
predictions <- mripredict_predict(mp, mri_data = mri_test, clinical_data = clinical_test)
!is.factor(batch) || nlevels(batch) != length(tmp$levels_batch) ||
any(levels(batch) != tmp$levels_batch)
predictions <- mripredict_predict(mp, mri_data = mri_test, clinical_data = clinical_test)
!is.factor(batch) || nlevels(batch) != length(tmp$levels_batch) ||
any(levels(batch) != tmp$levels_batch)
batch
tmp
mp
predictions <- mripredict_predict(mp, mri_data = mri_test, clinical_data = clinical_test)
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R")
predictions <- mripredict_predict(mp, mri_data = mri_test, clinical_data = clinical_test)
mri$data
mri_fu$data
mri_wm$data
covX_test
model_list$signif_indx
lasso_covB
lasso_covB_fu
model_list$mask
model_list$combat
mri_test
predictions <- mripredict_predict(mp, mri_data = mri_test, clinical_data = clinical_test)
mri_fu$data
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
mp
mp$mri_fu
mri_train
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R")
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
n_modalities
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R")
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R")
source("C:/Users/alsol/Nextcloud/docs/quim/MRIPredict/R/package/mripredict/R/source.R")
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
mri_fu
mri_un
library(mripredict)
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
library(mripredict)
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
library(mripredict)
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
library(mripredict)
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
gc()
library(mripredict)
mp <- mripredict(mri_data = mri_train, clinical_data = clinical_train,
response_var="female", covariates=c("cent_age"), predictor=c("score1"),
response_family="binomial", modulation="un")
?mripredict
mp <- mripredict_cv(mp, space = "NO_CHECK",
save_name = "testing",
folds_file = NULL,
n_cores = 1,
n_folds = 3)
mp <- mripredict_fit(mp, space = "MNI", save_name = "model_fit")
mp <- mripredict_fit(mp, space = "MNI", save_name = "model_fit")
tools::package_dependencies()
tools::package_dependencies(packages = mripredict)
tools::package_dependencies(packages = "mripredict")
